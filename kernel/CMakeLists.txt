cmake_minimum_required(VERSION 3.0)
include(CMakeForceCompiler)

project("kernel")

add_definitions(-DDEBUG -DASSERTIONS)

# additional files
set(LDFILE "${PROJECT_SOURCE_DIR}/link.ld")

# include files
get_filename_component(BASE_INCLUDE_DIR ${PROJECT_SOURCE_DIR} ABSOLUTE)
message(${BASE_INCLUDE_DIR})
include_directories(${BASE_INCLUDE_DIR})

# compiler flags
set(C_FLAGS "-std=gnu99 -mcmodel=large -ffreestanding -O2 -Werror") # Add later:  -Wall -Wextra
set(LD_FLAGS "-T ${LDFILE} -z max-page-size=0x1000")

# compilers
set(CMAKE_SYSTEM_NAME "Neon")
CMAKE_FORCE_C_COMPILER(x86_64-elf-gcc GNU)
set(CMAKE_C_LINK_EXECUTABLE "x86_64-elf-ld <LINK_FLAGS> <OBJECTS>  -o <TARGET> <LINK_LIBRARIES>")

enable_language(ASM_NASM)
SET (CMAKE_ASM_NASM_OBJECT_FORMAT "elf64")

# gather files
file(GLOB_RECURSE CFILES *.c)
file(GLOB_RECURSE ASMFILES *.asm)

# add Idris main file (other Idris files are pulled in by Main.idr)
SET(IDRIS_MAIN ${PROJECT_SOURCE_DIR}/idris/Main.idr)
SET(IDRIS_C_MAIN ${PROJECT_BINARY_DIR}/Main.idr.c)
add_custom_command(
  OUTPUT ${IDRIS_C_MAIN}
  COMMAND idris -S -o ${IDRIS_C_MAIN} ${IDRIS_MAIN}
  DEPENDS ${IDRIS_MAIN}
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/idris
)
LIST(APPEND CFILES ${IDRIS_C_MAIN})
set_source_files_properties(${IDRIS_C_MAIN} PROPERTIES COMPILE_FLAGS "-I${BASE_INCLUDE_DIR}/idrisrts")

add_definitions(-DIDRIS_TARGET_OS="neon" -DIDRIS_TARGET_TRIPLE="x86_64-neon-elf")

# define target
add_executable(${KERNEL_EXECUTABLE} ${CFILES} ${ASMFILES})

# installation
install(TARGETS ${KERNEL_EXECUTABLE} DESTINATION boot)

# set flags
set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")
set(CMAKE_C_FLAGS "${C_FLAGS}")

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_ASM_NASM_FLAGS "-g dwarf2")
endif (CMAKE_BUILD_TYPE STREQUAL "Debug")

set_target_properties(${KERNEL_EXECUTABLE} PROPERTIES LINK_FLAGS "${LD_FLAGS}")
